<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Tickets Viewer</title>

  <!-- requested CSS -->
  <link rel="stylesheet" href="https://support.koalabeast.com/static/css/normalize.css">
  <link rel="stylesheet" href="https://support.koalabeast.com/static/css/bootstrap-grid.css">
  <link rel="stylesheet" href="https://support.koalabeast.com/static/css/main.css">

  <style>
    /* UI styles */
    :root { --left-w: 320px; }
    body { margin:0; font-family: system-ui, -apple-system, "Segoe UI", Roboto, Arial; }
    .app { display:flex; min-height:100vh; }
    .left { width: var(--left-w); border-right:1px solid #e6e6e6; padding:12px; box-sizing:border-box; background:#fafafa; overflow:auto; }
    .main { flex:1; padding:12px; display:flex; flex-direction:column; gap:8px; }
    .controls { display:flex; gap:8px; align-items:center; margin-bottom:6px; }
    .ticket-list { list-style:none; padding:0; margin:0; }
    .ticket-item { padding:10px; border-radius:6px; cursor:pointer; margin-bottom:6px; border:1px solid transparent; }
    .ticket-item:hover { background:#f2f8ff; }
    .ticket-item.active { background:#e8f1ff; border-color:#2b90ff; }
    .ticket-item.seen .ticket-title { opacity:0.8; }
    .ticket-title { font-weight:600; font-size:13px; }
    .ticket-meta { font-size:12px; color:#666; margin-top:4px; }
    .viewer-frame { flex:1; border:1px solid #ddd; border-radius:6px; width:100%; }
    .search { flex:1; padding:8px; border-radius:6px; border:1px solid #ddd; }
    .btn { padding:6px 10px; border-radius:6px; background:#2b90ff; color:white; border:none; cursor:pointer; }
    .muted { color:#666; font-size:13px; }
    .toolbar { display:flex; gap:8px; align-items:center; }
    footer { font-size:12px; color:#666; padding-top:8px; }
    @media (max-width:900px){ .left { width: 40%; } }
  </style>
</head>
<body>
  <div class="app">
    <aside class="left">
      <div class="controls">
        <input id="filter" class="search" placeholder="Filter (filename or url)..." />
      </div>

      <div style="display:flex; gap:8px; align-items:center; margin:8px 0;">
        <label style="display:flex; gap:6px; align-items:center;">
          <input type="checkbox" id="openExternal" /> Open remote on click
        </label>
        <div class="muted" style="margin-left:auto">Manifest: <code>tickets_html/manifest.json</code></div>
      </div>

      <ul id="ticketList" class="ticket-list" aria-live="polite"></ul>

      <footer>
        Seen items are remembered in this browser. Use the Python generator to create `manifest.json`.
      </footer>
    </aside>

    <main class="main">
      <div class="toolbar">
        <div style="font-weight:700">Ticket Preview</div>
        <div class="muted"> — click a ticket to view</div>
        <div style="margin-left:auto; display:flex; gap:8px;">
          <button id="markAll" class="btn">Mark all seen</button>
          <button id="clearSeen" class="btn" style="background:#999">Clear seen</button>
          <button id="openNewTab" class="btn" style="background:#333">Open current</button>
        </div>
      </div>

      <iframe id="viewer" class="viewer-frame" sandbox="allow-same-origin allow-scripts allow-forms"></iframe>
    </main>
  </div>

<script>
const MANIFEST = "tickets_html/manifest.json";
const SEEN_KEY = "tickets_seen_v1";
const LAST_KEY = "tickets_last_v1";

let manifest = [];
let seen = new Set(JSON.parse(localStorage.getItem(SEEN_KEY) || "[]"));
let last = localStorage.getItem(LAST_KEY) || null;

const ticketListEl = document.getElementById("ticketList");
const viewer = document.getElementById("viewer");
const filterInput = document.getElementById("filter");
const openExternal = document.getElementById("openExternal");
const markAllBtn = document.getElementById("markAll");
const clearSeenBtn = document.getElementById("clearSeen");
const openNewTabBtn = document.getElementById("openNewTab");

function renderList(q="") {
  ticketListEl.innerHTML = "";
  const query = q.trim().toLowerCase();

  // iterate manifest (already sorted by date descending)
  manifest.forEach(item => {
    if (query) {
      if (!(item.filename.toLowerCase().includes(query) || item.url.toLowerCase().includes(query))) return;
    }
    const li = document.createElement("li");
    li.className = "ticket-item";
    li.dataset.filename = item.filename;
    li.dataset.url = item.url;

    const title = document.createElement("div");
    title.className = "ticket-title";
    title.textContent = item.filename;

    const meta = document.createElement("div");
    meta.className = "ticket-meta";
    meta.textContent = `${item.date} · ${item.url}`;

    li.appendChild(title);
    li.appendChild(meta);

    if (seen.has(item.filename)) li.classList.add("seen");
    if (last === item.filename) li.classList.add("active");

    li.addEventListener("click", () => {
      // active UI
      document.querySelectorAll(".ticket-item.active").forEach(x => x.classList.remove("active"));
      li.classList.add("active");

      // mark seen
      if (!seen.has(item.filename)) {
        seen.add(item.filename);
        localStorage.setItem(SEEN_KEY, JSON.stringify([...seen]));
        li.classList.add("seen");
      }

      last = item.filename;
      localStorage.setItem(LAST_KEY, last);

      // load either local url or remote (toggle)
      const src = openExternal.checked ? item.url : item.url;
      // item.url already points to tickets_html/<filename>
      viewer.src = src;
      openNewTabBtn.onclick = () => window.open(src, "_blank");
    });

    ticketListEl.appendChild(li);
  });
}

function fetchManifest() {
  fetch(MANIFEST, {cache: "no-cache"})
    .then(r => {
      if (!r.ok) throw new Error("Manifest not found: " + r.status);
      return r.json();
    })
    .then(data => {
      // Expecting array of {filename, date, url}
      // Sort by date descending (newest first)
      manifest = data.slice().sort((a,b) => (b.date || "").localeCompare(a.date || ""));
      renderList(filterInput.value);
      // restore last
      if (last) {
        const el = Array.from(document.querySelectorAll(".ticket-item")).find(it => it.dataset.filename === last);
        if (el) el.click();
      }
    })
    .catch(err => {
      console.error(err);
      ticketListEl.innerHTML = `<li class="ticket-item"><div class="ticket-title">Error loading manifest</div><div class="ticket-meta">${err.message}</div></li>`;
    });
}

/* handlers */
filterInput.addEventListener("input", (e)=> renderList(e.target.value));
markAllBtn.addEventListener("click", () => {
  manifest.forEach(it => seen.add(it.filename));
  localStorage.setItem(SEEN_KEY, JSON.stringify([...seen]));
  renderList(filterInput.value);
});
clearSeenBtn.addEventListener("click", () => {
  seen.clear();
  localStorage.setItem(SEEN_KEY, JSON.stringify([]));
  renderList(filterInput.value);
});

/* initial fetch */
fetchManifest();

/* keyboard nav */
document.addEventListener("keydown", (e) => {
  if (e.key === 'j' || e.key === 'k') {
    const items = Array.from(document.querySelectorAll('.ticket-item'));
    if (!items.length) return;
    let idx = items.findIndex(i => i.classList.contains('active'));
    if (idx === -1) idx = 0;
    else idx = (e.key === 'j') ? Math.min(items.length-1, idx+1) : Math.max(0, idx-1);
    items[idx].click();
    items[idx].scrollIntoView({block:"nearest"});
  }
});
</script>
</body>
</html>
